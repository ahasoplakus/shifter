---
title: "Tidy approach to create Shift Tables using {tidyverse} and {gt}"
---

## Shift Tables in Clinical Trials

### What is a Shift Table?

A shift table is a table that displays the number of subjects who are low, normal or high at baseline and the shift at post-dose. Writing code for a shift table is an easier task, if ADaM datasets are used rather than raw datasets. It represents cross frequencies of baseline values with post-dose values. The produced shift table gives safety information of the subjects during the clinical study.

### Purpose

The main purpose of shift tables in any clinical trial is to determine how the categorical result varies from baseline to post-dose.

It is important to look at the effect of the drug by comparing values at baseline and post –baseline in any clinical trials. Shift table is one of the analysis approaches suggested in E3 Guidelines to show the number of patients who are low, normal, or high at baseline and then at selected time intervals. It’s easier to figure out any abnormality in data because the layout helps to get the count of subjects at two time points together. Shift tables can be created for any data like labs, vital signs and ECG etc.

### Shift Table for Laboratory Results

All safety related data is collected in a clinical trial study for safety analysis. The laboratory data is one of the most important parts of safety analysis in any drug discovery study. The data mapping team and Statistical Programmers in the clinical programming department support the clinical data analysis and reporting process. The data mapping team analyzes and creates SDTM datasets from raw datasets. The Statistical Programming team creates the ADaM datasets and generates reports in a clinical study. ADaM data structure is such that, it has all the necessary variables needed to create reporting code and this makes the job easier for programmers.

There are several summary tables commonly used to produce laboratory results. Descriptive statistics, clinically significance, shift tables and toxicity grade summaries are some of the summary tables that are commonly used. The shift table is one of the most frequently requested in a clinical study by statisticians or clinicians.
The site that provides the laboratory results usually produces the normal ranges for numeric lab tests. The study team analyzes the lab results based on normal range and then flags or categorizes whether it is low, normal or high.

We will focus on how to create such a laboratory shift table in a step-wise explanation.

## Required Packages and Programs

```{r setup}
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(rlang))
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(stringr))

walk(list.files(here::here("R"), pattern = ".R", full.names = TRUE), source)
```

## Data used to produce Shift Table

The following ADSL and ADLB ADaM datasets from `{pharmaverseadam} R package are used in creation of shift table and help with understanding the programming process.

<b>ADSL</b>
```{r adsl}
adsl <- pharmaverseadam::adsl
slice_head(adsl, n = 10)
```

<b>ADLB</b>
```{r adlb}
adlb <- pharmaverseadam::adlb
slice_head(adlb, n = 10)
```

## Steps to create a Shift Table

### 1. Calculating BIG N

```{r adsl_n}
adsl_bign <- select(na_to_missing(adsl), all_of(c("USUBJID", "TRT01A"))) |>
  add_count(.data$TRT01A, name = "TRT_N")
adsl_bign
```

### 2. Pre-process Lab data

-  Get rid of missing `BNRIND, ANRIND, AVAL, VISITDY`
-  Add `BIG N` to `adlb`
-  Keeping only <b>Alkaline Phosphatase</b> records across <b>Week 6-Week 24</b> Visits (`AVISIT`)
-  Concatenating `BIG N` with Treatment Labels in `trt_var`

```{r prep_adlb}
adlb_prep <- adlb |>
  na_to_missing() |>
  mutate(across(all_of(c("BNRIND", "ANRIND")), str_to_title)) |>
  left_join(adsl_bign) |>
  filter(
    !is.na(.data$AVAL), .data$BNRIND != "<Missing>", .data$ANRIND != "<Missing>",
    !is.na(.data$VISITDY), .data$PARAMCD == "ALKPH", between(.data$AVISITN, 7, 24)
  ) |>
  mutate(trt_var = paste0(.data$TRT01A, "<br>(N=", TRT_N, ")")) |>
  select(-TRT_N)

adlb_prep
```

```{r tab_options}
tab_spanners <- unique(adlb_prep$trt_var)
m_tab_spanners <- paste0(tab_spanners, "<br>Baseline<br>n (%)")
N_Placebo <- get_trt_N(adsl_bign, "TRT01A", "Placebo")
N_Xano_High <- get_trt_N(adsl_bign, "TRT01A", "Xanomeline High Dose")
N_Xano_Low <- get_trt_N(adsl_bign, "TRT01A", "Xanomeline Low Dose")
```

```{r}
rep <-
  build_shift_table(
    bds_dataset = adlb_prep,
    trt_var = exprs(trt_var),
    analysis_grade_var = exprs(ANRIND),
    base_grade_var = exprs(BNRIND),
    grade_var_order = exprs(Low, Normal, High)
  )

rep |>
  gt::gt(groupname_col = "AVISIT", row_group_as_column = TRUE) |>
  gt::cols_label(ANRIND = gt::md("Post<br>Baseline")) |>
  gt::cols_label_with(columns = contains("<->"), \(x) custom_split(x, "<->")) |>
  gt::tab_spanner(columns = contains(tab_spanners[1]), label = gt::md(m_tab_spanners[1])) |>
  gt::tab_spanner(columns = contains(tab_spanners[2]), label = gt::md(m_tab_spanners[2])) |>
  gt::tab_spanner(columns = contains(tab_spanners[3]), label = gt::md(m_tab_spanners[3])) |>
  gt::data_color(method = "numeric", palette = gt_pal(), columns = c(3, 5, 7, 9, 11, 13)) |>
  gt::text_transform(
    fn = \(x) add_pct(x, N_Placebo, 2),
    locations = gt::cells_body(columns = contains(tab_spanners[1]))
  ) |>
  gt::text_transform(
    fn = \(x) add_pct(x, N_Xano_High, 2),
    locations = gt::cells_body(columns = contains(tab_spanners[2]))
  ) |>
  gt::text_transform(
    fn = \(x) add_pct(x, N_Xano_Low, 2),
    locations = gt::cells_body(columns = contains(tab_spanners[3]))
  ) |>
  #gt::tab_stubhead(label = gt::md("Analysis<br>Visit")) |>
  gt::tab_source_note(source_note = "This is a source note.") |>
  gt::tab_footnote(
    footnote = "This is a footnote.",
    locations = gt::cells_body(columns = 1, rows = 1)
  ) |>
  gt::tab_header(
    title = "The title of the table",
    subtitle = "The table's subtitle"
  ) |>
  gt::opt_table_lines()
```
