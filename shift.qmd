---
title: "Creating a Shift Table in R"
html-table-processing: none
---

We will focus on how to create such a laboratory shift table in a step-wise explanation.

## Required Packages {.unnumbered}

```{r setup}
#| warning: false
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(rlang))
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(stringr))

walk(list.files(here::here("R"), pattern = ".R", full.names = TRUE), source)
```

## Data used for Analysis {.unnumbered}

The following ADSL and ADLB ADaM datasets from `{pharmaverseadam}` R package are used in creation of shift table and help with understanding the programming process.

::: panel-tabset
## ADSL

```{r}
adsl <- pharmaverseadam::adsl
```

```{r}
#| echo: false
glimpse_dataset(adsl)
```

## ADLB

```{r}
adlb <- pharmaverseadam::adlb
```

```{r}
#| echo: false
glimpse_dataset(slice_head(adlb, n = 500))
```
:::

## Steps to create a Shift Table {.unnumbered}

### 1. Calculating BIG N

The ADSL is the analysis dataset for each subject level. 

-   Keep safety subjects only (`SAFFL` == `'Y'`)
-   Count number of subjects participating in each treatment group.

```{r adsl_n}
adsl_bign <- adsl |>
  na_to_missing() |>
  filter(.data$SAFFL == "Y") |>
  select(all_of(c("USUBJID", "TRT01A"))) |>
  add_count(.data$TRT01A, name = "TRT_N")
```

```{r}
#| echo: false
glimpse_dataset(adsl_bign)
```

### 2. Pre-process Lab data

-   Filter out missing values in `BNRIND, ANRIND, AVAL`
-   Merge `adsl` to `adlb` to add `BIG N`
-   Subset the ADLB dataset for safety subjects where analysis flag is equal to `Y` and at post-dose
-   Select <b>Hemoglobin</b> records (which is our parameter of interest for this example) within the desired time period (Week 2-Week 6)
-   Concatenate `BIG N` with Treatment Labels in `TRT_VAR`

```{r prep_adlb}
#| warning: false
#| message: false
adlb <- adlb |>
  na_to_missing() |>
  mutate(across(all_of(c("BNRIND", "ANRIND")), str_to_title)) |>
  left_join(adsl_bign) |>
  filter(
    .data$ANL01FL == "Y",
    !is.na(.data$AVAL),
    .data$BNRIND != "<Missing>",
    .data$ANRIND != "<Missing>",
    .data$AVISIT %in% c("Week 2", "Week 4", "Week 6")
  ) |>
  mutate(TRT_VAR = paste0(.data$TRT01A, "<br>(N=", .data$TRT_N, ")")) |>
  select(-TRT_N)

adlb_prep <- adlb |>
  filter(.data$PARAMCD == "HGB")
```

```{r}
#| echo: false
glimpse_dataset(adlb_prep)
```

### 3. Creating a dummy dataset to get all combinations of ANRIND and BNRIND

```{r dummy}
all_anrind_comb <- expand_grid(
  TRT_VAR = unique(adlb_prep[["TRT_VAR"]]),
  AVISIT = intersect(levels(as.factor(adlb_prep[["AVISIT"]])), unique(adlb_prep[["AVISIT"]])),
  BNRIND = as.factor(c("Low", "Normal", "High", "Total"))
) |>
  cross_join(tibble(ANRIND = as.factor(c("Low", "Normal", "High"))))
```

```{r}
#| echo: false
glimpse_dataset(all_anrind_comb)
```

### 4. Performing Counts

```{r count}
shift_counts <- adlb_prep |>
  bind_rows(mutate(adlb_prep, BNRIND = "Total")) |>
  group_by(!!!syms(c("TRT_VAR", "AVISITN", "ANRIND", "BNRIND"))) |>
  count(.data[["AVISIT"]], name = "CNT") |>
  ungroup() |>
  full_join(all_anrind_comb, by = c("TRT_VAR", "AVISIT", "BNRIND", "ANRIND")) |>
  mutate(across("CNT", ~ replace_na(.x, 0))) |>
  arrange(
    .data[["TRT_VAR"]],
    factor(.data[["BNRIND"]], levels = c("Low", "Normal", "High", "Total")),
    factor(.data[["ANRIND"]], levels = c("Low", "Normal", "High", "Total")),
    .data[["AVISITN"]]
  ) |>
  select(-all_of("AVISITN"))
```

```{r}
#| echo: false
glimpse_dataset(shift_counts)
```

### 5. Reshape Data and count Grade Totals

```{r reshape}
shift_wide <- shift_counts |>
  pivot_wider(
    id_cols = all_of(c("AVISIT", "ANRIND")),
    names_from = all_of(c("TRT_VAR", "BNRIND")),
    values_from = "CNT",
    names_sep = "<br>Baseline<br>n (%)_"
  )

post_base_grade_totals <- shift_wide |>
  summarize(across(where(is.numeric), sum), .by = all_of("AVISIT")) |>
  mutate(ANRIND = "Total")

shift_final <- shift_wide |>
  bind_rows(post_base_grade_totals)
```

The same could be attained by creating a function `build_shift_table()` which covers <b>Steps 3-5</b>

```{r}
#| eval: false
shift_final <-
  build_shift_table(
    bds_dataset = adlb_prep,
    trt_var = exprs(TRT_VAR),
    analysis_grade_var = exprs(ANRIND),
    base_grade_var = exprs(BNRIND),
    grade_var_order = exprs(Low, Normal, High),
    visit_var = exprs(AVISIT, AVISITN)
  )
```

```{r}
#| echo: false
glimpse_dataset(shift_final)
```

### 6. Display the final table

```{r display}
N_labs <- map(set_names(unique(adsl_bign[["TRT01A"]])), ~ get_trt_N(adsl_bign, "TRT01A", .x))

out <-
  shift_final |>
  gt::gt(groupname_col = "AVISIT", row_group_as_column = TRUE) |>
  gt::cols_label(ANRIND = gt::md("Post<br>Dose")) |>
  gt::tab_spanner_delim(delim = "_") |>
  gt::text_transform(fn = \(x) map(x, \(y) gt::md(y)), locations = gt::cells_column_spanners()) |> 
  gt::text_transform(
    fn = \(x) add_pct(x, N_labs[[1]], 1),
    locations = gt::cells_body(columns = 3:6)
  ) |>
  gt::text_transform(
    fn = \(x) add_pct(x, N_labs[[2]], 1),
    locations = gt::cells_body(columns = 7:10)
  ) |>
  gt::text_transform(
    fn = \(x) add_pct(x, N_labs[[3]], 1),
    locations = gt::cells_body(columns = 11:14)
  ) |> 
  gt::tab_stubhead(gt::md("Analysis Visit")) |>
  gt::tab_footnote(
    footnote = "This is a footnote.",
    locations = gt::cells_body(columns = 1, rows = 1)
  ) |>
  gt::tab_header(
    title = gt::md("Protocol: xxxx<br><br>Table x.x<br>Shift Table of Lab Hematology<br>(Full Safety Analysis Set)"),
    subtitle = "Parameter: Hemoglobin"
  ) |>
  gt::tab_style(
    style = gt::cell_text(weight = "bold"),
    locations = gt::cells_body(columns = 2)
  ) |>
  gt::tab_style(
    style = gt::cell_text(align = "center"),
    locations = gt::cells_body(columns = seq.int(3:14))
  ) |>
  gt::tab_style(
    style = gt::cell_text(align = "center"),
    locations = gt::cells_column_labels(columns = seq.int(3:14))
  ) |>
  gt::tab_options(
    table.background.color = "white",
    table.font.names = "monospace-slab-serif",
    row_group.font.weight = "bold",
    column_labels.font.weight = "bold",
    heading.align = "left",
    heading.title.font.weight = "bold",
    heading.title.font.size = "20px",
    heading.padding = "10px",
    heading.subtitle.font.size = "14px"
  )
out
```

### 7. Using `{purrr}` to iterate creating Shift Tables for multiple parameters

```{r}
adlb_hmt <- adlb |>
  filter(toupper(.data$PARAMCD) %in% c("PLAT", "HCT", "MCH")) |>
  group_nest(.data$PARAM)

shift_out <- map(adlb_hmt$data, \(x) {
  build_shift_table(
    bds_dataset = x,
    trt_var = exprs(TRT_VAR),
    analysis_grade_var = exprs(ANRIND),
    base_grade_var = exprs(BNRIND),
    grade_var_order = exprs(Low, Normal, High),
    visit_var = exprs(AVISIT, AVISITN)
  )
}) |>
  set_names(adlb_hmt$PARAM)

list_out <-
  map(names(shift_out), \(x) {
    shift_out[[x]] |>
      gt::gt(groupname_col = "AVISIT", row_group_as_column = TRUE) |>
      gt::cols_label(ANRIND = gt::md("Post<br>Dose")) |>
      gt::tab_spanner_delim(delim = "_") |>
      gt::text_transform(
        fn = \(x) map(x, \(y) gt::md(y)),
        locations = gt::cells_column_spanners()) |> 
      gt::text_transform(
        fn = \(x) add_pct(x, N_labs[[1]], 1),
        locations = gt::cells_body(columns = 3:6)
      ) |>
      gt::text_transform(
        fn = \(x) add_pct(x, N_labs[[2]], 1),
        locations = gt::cells_body(columns = 7:10)
      ) |>
      gt::text_transform(
        fn = \(x) add_pct(x, N_labs[[3]], 1),
        locations = gt::cells_body(columns = 11:14)
      ) |>
      gt::tab_stubhead(gt::md("Analysis Visit")) |>
      gt::tab_footnote(
        footnote = "This is a footnote.",
        locations = gt::cells_body(columns = 1, rows = 1)
      ) |>
      gt::tab_header(
        title = gt::md("Protocol: xxxx<br><br>Table x.x<br>Shift Table of Lab Hematology<br>(Full Safety Analysis Set)"),
        subtitle = paste0("Parameter: ", x)
      ) |>
      gt::tab_style(
        style = gt::cell_text(weight = "bold"),
        locations = gt::cells_body(columns = 2)
      ) |>
      gt::tab_style(
        style = gt::cell_text(align = "center"),
        locations = gt::cells_body(columns = seq.int(3:13))
      ) |>
      gt::tab_style(
        style = gt::cell_text(align = "center"),
        locations = gt::cells_column_labels(columns = seq.int(3:13))
      ) |>
      gt::tab_options(
        table.background.color = "white",
        table.font.names = "monospace-slab-serif",
        row_group.font.weight = "bold",
        column_labels.font.weight = "bold",
        heading.align = "left",
        heading.title.font.weight = "bold",
        heading.title.font.size = "20px",
        heading.padding = "10px",
        heading.subtitle.font.size = "14px"
      )
  })
```

```{r list, results='asis'}
#| echo: false
walk(seq_along(list_out), \(i) print(list_out[[i]]))
```
