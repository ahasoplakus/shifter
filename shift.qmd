---
title: "Workflow to create a Shift Table in R"
html-table-processing: none
---

Generating a shift table involves calculating Big N's (treatment totals), lab parameter counts, denominator counts and then displaying the final table adhering to the expected layout.

The workflow below describes a step-by-step programming approach to create Laboratory Shift Tables in R using the `{tidyverse}` suite for data wrangling, and `{gt}` R package to display the shift table according to the expected layout.

## Required Packages {.unnumbered}

```{r setup}
#| warning: false
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(rlang))
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(gt))
suppressPackageStartupMessages(library(here))

walk(list.files(here("R"), pattern = ".R", full.names = TRUE), source)
```

## Data used for Analysis {.unnumbered}

The following ADSL and ADLB ADaM datasets from `{pharmaverseadam}` R package are used in creation of the shift table and to help understanding the programming process.

::: panel-tabset
## ADSL

```{r}
adsl <- pharmaverseadam::adsl
```

```{r}
#| echo: false
glimpse_dataset(adsl)
```

## ADLB

```{r}
adlb <- pharmaverseadam::adlb
```

```{r}
#| echo: false
glimpse_dataset(slice_head(adlb, n = 500))
```
:::

## Programming Steps {.unnumbered}

### 1. Calculating BIG N (Treatment Totals)

The ADSL is the analysis dataset for each subject level. 

-   Keep safety subjects only (`SAFFL` == `'Y'`)
-   Count number of subjects participating in each treatment group (`TRT01A`)

```{r adsl_n}
adsl_bign <- adsl |>
  na_to_missing() |>
  filter(.data$SAFFL == "Y") |>
  select(all_of(c("USUBJID", "TRT01A"))) |>
  add_count(.data$TRT01A, name = "TRT_N")
```

```{r}
#| echo: false
glimpse_dataset(adsl_bign)
```

#### 1.1 Calculating denominator count

Store `N` by treatment group within a list to use later to display total number of subjects in each treatment group at top level of the report.

```{r}
denom_N <-
  map(set_names(unique(adsl_bign[["TRT01A"]])), ~ get_trt_N(adsl_bign, "TRT01A", .x))
denom_N
```

### 2. Pre-process Lab data

-   Filter out missing values in `BNRIND, ANRIND, AVAL`
-   Merge `adsl_bign` to `adlb` to add `TRT_N`
-   Subset the merged `adlb` dataset for safety subjects where analysis flag is equal to `Y` and at post-dose
-   Select Lab records within the desired time period (eg. `Week 2-Week 6`) to display the shifts in
-   Add `BIG N` to treatment labels by concatenating `TRT_N` with `TRT01A`

```{r prep_adlb}
#| warning: false
#| message: false
adlb_prep <- adlb |>
  na_to_missing() |>
  mutate(across(all_of(c("BNRIND", "ANRIND")), str_to_title)) |>
  left_join(adsl_bign) |>
  filter(
    .data$ANL01FL == "Y",
    !is.na(.data$AVAL),
    .data$BNRIND != "<Missing>",
    .data$ANRIND != "<Missing>",
    .data$AVISIT %in% c("Week 2", "Week 4", "Week 6")
  ) |>
  mutate(TRT_VAR = paste0(.data$TRT01A, "<br>(N=", .data$TRT_N, ")")) |>
  select(-TRT_N)
```

#### 2.1 Subsetting the `adlb` dataset for Hemoglobin Lab parameters

```{r}
adlb_hgb <- adlb_prep |>
  filter(.data$PARAMCD == "HGB")
```

```{r}
#| echo: false
glimpse_dataset(adlb_hgb)
```

### 3. Creating a dummy dataset

Creat a dummy dataset that contains a row for each Base value (`Low`, `Normal`, `High` and `Total`) and corresponding post-dose 
value (`Low`, `Normal`, `High`).

```{r dummy}
comb_base_pbase <- expand_grid(
  TRT_VAR = unique(adlb_hgb[["TRT_VAR"]]),
  AVISIT = intersect(levels(as.factor(adlb_hgb[["AVISIT"]])), unique(adlb_hgb[["AVISIT"]])),
  BNRIND = as.factor(c("Low", "Normal", "High", "Total"))
) |>
  cross_join(tibble(ANRIND = as.factor(c("Low", "Normal", "High"))))
```

```{r}
#| echo: false
glimpse_dataset(comb_base_pbase)
```

### 4. Calculate Parameter Counts

```{r count}
shift_counts <- adlb_hgb |>
  bind_rows(mutate(adlb_hgb, BNRIND = "Total")) |>
  group_by(!!!syms(c("TRT_VAR", "AVISITN", "ANRIND", "BNRIND"))) |>
  count(.data[["AVISIT"]], name = "CNT") |>
  ungroup() |>
  full_join(comb_base_pbase, by = c("TRT_VAR", "AVISIT", "BNRIND", "ANRIND")) |>
  mutate(across("CNT", ~ replace_na(.x, 0))) |>
  arrange(
    .data[["TRT_VAR"]],
    factor(.data[["BNRIND"]], levels = c("Low", "Normal", "High", "Total")),
    factor(.data[["ANRIND"]], levels = c("Low", "Normal", "High", "Total"))
  )
```

```{r}
#| echo: false
glimpse_dataset(shift_counts)
```

### 5. Reshape Data and add Grade Totals

```{r reshape}
shift_wide <- shift_counts |>
  pivot_wider(
    id_cols = all_of(c("AVISIT", "ANRIND")),
    names_from = all_of(c("TRT_VAR", "BNRIND")),
    values_from = "CNT",
    names_sep = "<br>Baseline<br>n (%)^"
  )

post_base_grade_totals <- shift_wide |>
  summarize(across(where(is.numeric), sum), .by = all_of("AVISIT")) |>
  mutate(ANRIND = "Total")

visit_levels <- arrange(filter(shift_counts, !is.na(.data$AVISITN)), by = .data$AVISITN) |>
  pull(.data$AVISIT) |>
  unique()

shift_final <- shift_wide |>
  bind_rows(post_base_grade_totals) |>
  arrange(factor(.data$AVISIT, levels = visit_levels))
```

The same could be attained by creating a function `build_shift_table()` which covers <b>Steps 3-5</b>

```{r}
#| eval: false
shift_final <-
  build_shift_table(
    bds_dataset = adlb_hgb,
    trt_var = exprs(TRT_VAR),
    analysis_grade_var = exprs(ANRIND),
    base_grade_var = exprs(BNRIND),
    grade_var_order = exprs(Low, Normal, High),
    visit_var = exprs(AVISIT, AVISITN)
  )
```

```{r}
#| echo: false
glimpse_dataset(shift_final)
```

### 6. Display Table

::: panel-tabset
## Single Parameter

```{r display}
out <-
  shift_final |>
  gt(groupname_col = "AVISIT", row_group_as_column = TRUE) |>
  cols_label_with(columns = contains("ANRIND"), \(x) md("Reference<br>Range")) |>
  tab_spanner_delim(delim = "^") |>
  text_transform(fn = \(x) map(x, \(y) md(y)), locations = cells_column_spanners()) |>
  text_transform(
    fn = \(x) add_pct(x, denom_N[[1]], 1),
    locations = cells_body(columns = 3:6)
  ) |>
  text_transform(
    fn = \(x) add_pct(x, denom_N[[2]], 1),
    locations = cells_body(columns = 7:10)
  ) |>
  text_transform(
    fn = \(x) add_pct(x, denom_N[[3]], 1),
    locations = cells_body(columns = 11:14)
  ) |>
  tab_stubhead(md("Analysis Visit")) |>
  tab_footnote(footnote = "This is a footnote") |>
  tab_header(
    title = md("Protocol: xxxx<br><br>Table x.x<br>Shift Table of Lab Hematology<br>(Full Safety Analysis Set)"), # nolint
    subtitle = paste0("Parameter = ", unique(pull(adlb_hgb, "PARAM")))
  ) |>
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_body(columns = 2)
  ) |>
  tab_style(
    style = cell_text(align = "center"),
    locations = cells_body(columns = -c(1, 2))
  ) |>
  tab_style(
    style = cell_text(align = "center"),
    locations = cells_column_labels(columns = -c(1, 2))
  ) |>
  tab_options(
    table.background.color = "white",
    table.font.names = "monospace-slab-serif",
    row_group.font.weight = "bold",
    column_labels.font.weight = "bold",
    heading.title.font.weight = "bold",
    heading.title.font.size = "20px",
    heading.padding = "10px",
    heading.subtitle.font.size = "14px"
  ) |>
  opt_css(
    css = "
    .gt_heading {
      border-top-style: hidden !important;
    }
    .gt_table {
      width: max-content !important;
    }
    .gt_subtitle {
      text-align: left !important;
      color: gray !important;
    }
    "
  )
out
```

## Multiple Parameters

Using `{purrr}` functions to iterate creating Shift Tables

```{r}
adlb_multi <- adlb_prep |>
  filter(toupper(.data$PARAMCD) %in% c("PLAT", "HCT", "MCH")) |>
  group_nest(.data$PARAM)

shift_out <- map(adlb_multi$data, \(x) {
  build_shift_table(
    bds_dataset = x,
    trt_var = exprs(TRT_VAR),
    analysis_grade_var = exprs(ANRIND),
    base_grade_var = exprs(BNRIND),
    grade_var_order = exprs(Low, Normal, High),
    visit_var = exprs(AVISIT, AVISITN)
  )
}) |>
  set_names(adlb_multi$PARAM)

list_out <-
  map(names(shift_out), \(x) {
    tab_display(
      shift_out[[x]],
      param = x,
      group_col = "AVISIT",
      trt_denom = denom_N,
      title = "Protocol: CDISCPILOT01<br><br>Table x.x<br>Shift Table of Lab Hematology<br>(Full Safety Analysis Set)", # nolint
      footnote = "Add footnote here",
      stub_label = "Analysis Visit"
    )
  })
```

```{r list, results='asis'}
#| echo: false
walk(seq_along(list_out), \(i) print(list_out[[i]]))
```
:::
