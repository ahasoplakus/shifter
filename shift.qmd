---
title: "Creating a Shift Table in R"
---

The workflow below shows a step-by-step programming approach to create Shift Tables for Laboratory records using the `{tidyverse}` suite for data processing, and `{gt}` to create the desired Shift Table layout.

## Required Packages

```{r setup}
#| warning: false
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(rlang))
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(gt))
suppressPackageStartupMessages(library(here))

# Source all R scripts from https://github.com/ahasoplakus/shifter/tree/main/R
walk(list.files(here("R"), pattern = ".R", full.names = TRUE), source)
```

## Data used for Analysis

We will make use of the `adsl` and `adlb` test <b>ADaM</b> datasets from the [{pharmaverseadam}](https://github.com/pharmaverse/pharmaverseadam) R package for analysis.

::: panel-tabset
## ADSL

<b>ADSL is the analysis dataset for subject level</b>

```{r}
adsl <- pharmaverseadam::adsl
```

```{r}
#| echo: false
glimpse_dataset(adsl)
```

## ADLB

<b>ADLB is the analysis dataset for Laboratory Records of subjects</b>

```{r}
adlb <- pharmaverseadam::adlb
```

```{r}
#| echo: false
glimpse_dataset(slice_head(adlb, n = 500))
```
:::

## Variables used for Analysis

-   USUBJID - Unique Subject Identifier
-   SAFFL - Safety Population Flag
-   TRT01A - Actual Treatment Arm for Period 01
-   PARAM - Parameter
-   PARAMCD - Parameter Code
-   AVISIT - Analysis Visit
-   AVISITN - Analysis Visit (Numeric)
-   AVAL - Analysis Value
-   ANL01FL - Analysis Flag 01
-   BNRIND - Baseline Reference Range Indicator
-   ANRIND - Analysis Reference Range Indicator

## Programming Flow

### 1. Calculating BIG N (Treatment Totals)

-   Keep only safety subjects (`SAFFL` == `'Y'`) in `adsl`
-   Count number of subjects participating in each treatment group (`TRT01A`)

```{r adsl_n}
adsl_bign <- adsl |>
  na_to_missing() |>
  filter(.data$SAFFL == "Y") |>
  select(all_of(c("USUBJID", "TRT01A"))) |>
  add_count(.data$TRT01A, name = "TRT_N")
```

```{r}
#| echo: false
glimpse_dataset(adsl_bign)
```

Get distinct treatment totals to

-   Display total number of subjects in each treatment group at top level of the report
-   Use as denominator to calculate count percentages in the final table

```{r}
denom_N <-
  map(set_names(unique(adsl_bign[["TRT01A"]])), ~ get_trt_denom(adsl_bign, "TRT01A", .x))
denom_N
```

### 2. Preprocessing Lab Records

-   Merge `adsl_bign` to `adlb` to add `TRT_N`
-   Filter out missing values in Baseline Reference Range Indicator (`BNRIND`), Analysis Reference Range Indicator (`ANRIND`) and Analysis Value (`AVAL`)
-   Subset the resulting data for subjects with post-does records where analysis flag is equal to `'Y'`
-   Subset data to keep lab records within the desired time period (eg. `Week 2-Week 6`)
-   Add `BIG N` to treatment labels by concatenating `TRT_N` with `TRT01A`

```{r prep_adlb}
#| warning: false
#| message: false
adlb_prep <- adlb |>
  na_to_missing() |>
  mutate(across(all_of(c("BNRIND", "ANRIND")), str_to_title)) |>
  left_join(adsl_bign) |>
  filter(
    .data$BNRIND != "<Missing>",
    .data$ANRIND != "<Missing>",
    !is.na(.data$AVAL),
    .data$ANL01FL == "Y",
    .data$AVISIT %in% c("Week 2", "Week 4", "Week 6")
  ) |>
  mutate(TRT_VAR = paste0(.data$TRT01A, "<br>(N=", .data$TRT_N, ")")) |>
  select(-TRT_N)
```

<br> Subset `adlb_prep` to keep only Hemoglobin records </br>

```{r}
adlb_hgb <- adlb_prep |>
  filter(.data$PARAMCD == "HGB")
```

```{r}
#| echo: false
glimpse_dataset(adlb_hgb, exprs(USUBJID, TRT01A, TRT_VAR, PARCAT1, PARAM, AVISIT, BNRIND, ANRIND, AVAL))
```

### 3. Creating a dummy dataset

Create a dummy dataset that contains all possible combination of `BNRIND` and `ANRIND` values by Treatment.

```{r dummy}
comb_base_pbase <- expand_grid(
  TRT_VAR = unique(adlb_hgb[["TRT_VAR"]]),
  AVISIT = unique(adlb_hgb[["AVISIT"]]),
  BNRIND = c("Low", "Normal", "High", "Total")
) |>
  cross_join(tibble(ANRIND = c("Low", "Normal", "High")))
```

```{r}
#| echo: false
glimpse_dataset(comb_base_pbase)
```

### 4. Performing Counts by Analysis Visit

```{r count}
shift_counts <- adlb_hgb |>
  bind_rows(mutate(adlb_hgb, BNRIND = "Total")) |>
  group_by(!!!syms(c("TRT_VAR", "AVISITN", "ANRIND", "BNRIND"))) |>
  count(.data[["AVISIT"]], name = "CNT") |>
  ungroup() |>
  # merge dummy dataset to get all combinations of `ANRIND` and `BNRIND` values
  full_join(comb_base_pbase, by = c("TRT_VAR", "AVISIT", "BNRIND", "ANRIND")) |>
  mutate(across("CNT", ~ replace_na(.x, 0))) |>
  arrange(
    .data[["TRT_VAR"]],
    factor(.data[["BNRIND"]], levels = c("Low", "Normal", "High", "Total"))
  )
```

```{r}
#| echo: false
glimpse_dataset(shift_counts)
```

### 5. Reshaping Data

-   Reshaping data to wide format to get the final Shift Table layout
-   Adding Post-Baseline Grade Totals

```{r reshape}
shift_wide <- shift_counts |>
  pivot_wider(
    id_cols = all_of(c("AVISIT", "ANRIND")),
    names_from = all_of(c("TRT_VAR", "BNRIND")),
    values_from = "CNT",
    names_sep = "<br>Baseline<br>n (%)^"
  )

post_base_grade_totals <- shift_wide |>
  summarize(across(where(is.numeric), sum), .by = all_of("AVISIT")) |>
  mutate(ANRIND = "Total")

visit_levels <-
  arrange(filter(shift_counts, !is.na(.data$AVISITN)), by = .data$AVISITN) |>
  pull(.data$AVISIT) |>
  unique()

shift_final <- shift_wide |>
  bind_rows(post_base_grade_totals) |>
  arrange(
    factor(.data$AVISIT, levels = visit_levels),
    factor(.data$ANRIND, levels = c("Low", "Normal", "High", "Total"))
  )
```

An alternate and tidier approach would be to create a function say `count_shifts()` to cover <b>Steps 3-5</b>

```{r}
#| eval: false
shift_final <-
  count_shifts(
    bds_dataset = adlb_hgb,
    trt_var = exprs(TRT_VAR),
    analysis_grade_var = exprs(ANRIND),
    base_grade_var = exprs(BNRIND),
    grade_var_order = exprs(Low, Normal, High),
    visit_var = exprs(AVISIT, AVISITN)
  )
```

```{r}
#| echo: false
glimpse_dataset(shift_final)
```

### 6. Displaying Final Table with `{gt}`

::: panel-tabset
## Single Parameter (Hemoglobin)

```{r display}
out <-
  shift_final |>
  gt(groupname_col = "AVISIT", row_group_as_column = TRUE) |>
  cols_label_with(columns = contains("ANRIND"), \(x) md("Reference<br>Range")) |>
  tab_spanner_delim(delim = "^") |>
  text_transform(fn = \(x) map(x, \(y) md(y)), locations = cells_column_spanners()) |>
  # calculate percentages
  text_transform(
    fn = \(x) add_pct(x, denom_N[[1]], 1),
    locations = cells_body(columns = 3:6)
  ) |>
  text_transform(
    fn = \(x) add_pct(x, denom_N[[2]], 1),
    locations = cells_body(columns = 7:10)
  ) |>
  text_transform(
    fn = \(x) add_pct(x, denom_N[[3]], 1),
    locations = cells_body(columns = 11:14)
  ) |>
  # headers and footers
  tab_stubhead(md("Analysis Visit")) |>
  tab_footnote(footnote = "This is a footnote") |>
  tab_header(
    title = md("Protocol: CDISCPILOT01<br><br>Table x.x<br>Shift Table of Lab Hematology<br>(Full Safety Analysis Set)"),
    subtitle = paste0("Parameter = ", unique(pull(adlb_hgb, "PARAM")))
  ) |>
  # cell styling
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_body(columns = 2)
  ) |>
  tab_style(
    style = cell_text(align = "center"),
    locations = cells_body(columns = -c(1, 2))
  ) |>
  tab_style(
    style = cell_text(align = "center"),
    locations = cells_column_labels(columns = -c(1, 2))
  ) |>
  # other options
  tab_options(
    table.background.color = "white",
    table.font.names = "monospace-slab-serif",
    row_group.font.weight = "bold",
    column_labels.font.weight = "bold",
    heading.title.font.weight = "bold",
    heading.title.font.size = "20px",
    heading.padding = "10px",
    heading.subtitle.font.size = "14px"
  ) |>
  opt_css(
    css = "
    .gt_heading {
      border-top-style: hidden !important;
    }
    .gt_table {
      width: max-content !important;
    }
    .gt_subtitle {
      text-align: left !important;
      color: gray !important;
    }
    "
  )
out
```

## Multiple Parameters

-   Split `adlb_prep` by multiple parameters.
-   Map over `count_shifts()` on the data split by parameters
-   Create a function `std_shift_display()` to combine the table display options and map it over on the `list` output retrieved from the previous step

```{r}
adlb_multi <- adlb_prep |>
  filter(toupper(.data$PARAMCD) %in% c("PLAT", "HCT", "MCH")) |>
  group_nest(.data$PARAM)

shift_out <- map(adlb_multi$data, \(x) {
  count_shifts(
    bds_dataset = x,
    trt_var = exprs(TRT_VAR),
    analysis_grade_var = exprs(ANRIND),
    base_grade_var = exprs(BNRIND),
    grade_var_order = exprs(Low, Normal, High),
    visit_var = exprs(AVISIT, AVISITN)
  )
}) |>
  set_names(adlb_multi$PARAM)

list_out <-
  map(names(shift_out), \(x) {
    shift_out[[x]] |>
      std_shift_display(
        param = x,
        group_col = "AVISIT",
        trt_denom = denom_N,
        title = "Protocol: CDISCPILOT01<br><br>Table x.x<br>Shift Table of Lab Hematology<br>(Full Safety Analysis Set)",
        footnote = "Add footnote here",
        stub_label = "Analysis Visit"
      )
  })
```

```{r list, results='asis'}
#| echo: false
walk(seq_along(list_out), \(i) print(list_out[[i]]))
```
:::
